@page "/history"
@inject AppDbContext DbContext
@inject IJSRuntime JSRuntime
@using PomodoroFocus.Components.Shared

@implements IAsyncDisposable

<div class="container mx-auto px-4 py-8">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 transition-colors duration-200">
        <h3 class="text-4xl font-bold text-primary-600 mb-6 transition-colors duration-200">历史记录</h3>

        <!-- 步骤 1: 添加视图切换按钮 -->
        <div class="view-selector flex flex-wrap gap-2 mb-6" role="group">
            <button type="button" class="px-4 py-2 rounded-lg font-medium transition-all duration-200 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50 active:scale-95 transform hover:-translate-y-0.5 @(_currentViewMode == ViewMode.All ? "btn-primary" : "btn-secondary")" @onclick="() => ChangeViewAsync(ViewMode.All)">全部</button>
            <button type="button" class="px-4 py-2 rounded-lg font-medium transition-all duration-200 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50 active:scale-95 transform hover:-translate-y-0.5 @(_currentViewMode == ViewMode.Day ? "btn-primary" : "btn-secondary")" @onclick="() => ChangeViewAsync(ViewMode.Day)">日视图</button>
            <button type="button" class="px-4 py-2 rounded-lg font-medium transition-all duration-200 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50 active:scale-95 transform hover:-translate-y-0.5 @(_currentViewMode == ViewMode.Week ? "btn-primary" : "btn-secondary")" @onclick="() => ChangeViewAsync(ViewMode.Week)">周视图</button>
            <button type="button" class="px-4 py-2 rounded-lg font-medium transition-all duration-200 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50 active:scale-95 transform hover:-translate-y-0.5 @(_currentViewMode == ViewMode.Month ? "btn-primary" : "btn-secondary")" @onclick="() => ChangeViewAsync(ViewMode.Month)">月视图</button>
            <button type="button" class="px-4 py-2 rounded-lg font-medium transition-all duration-200 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50 active:scale-95 transform hover:-translate-y-0.5 @(_currentViewMode == ViewMode.Year ? "btn-primary" : "btn-secondary")" @onclick="() => ChangeViewAsync(ViewMode.Year)">年视图</button>
        </div>

        <!-- 步骤 2: 自定义时间范围筛选 -->
        <div class="filter-controls mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 transition-colors duration-200">
            <h5 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 transition-colors duration-200">@_viewTitle</h5>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 items-end">
                <div>
                    <label for="startDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-200">开始时间</label>
                    <input id="startDate" type="datetime-local" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 hover:shadow-md" @bind="_startDate" />
                </div>
                <div>
                    <label for="endDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 transition-colors duration-200">结束时间</label>
                    <input id="endDate" type="datetime-local" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 hover:shadow-md" @bind="_endDate" />
                </div>
                <div>
                    <button class="w-full px-6 py-3 bg-primary hover:bg-secondary text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-50 active:scale-95" @onclick="ApplyCustomFilterAsync">应用自定义筛选</button>
                </div>
            </div>
        </div>


    @if (sessions == null || !sessions.Any())
    {
        <p class="text-gray-600 dark:text-gray-400 text-center py-8"><em>@message</em></p>
    }
    else
    {
        <div class="chart-container mb-8 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg" style="max-width: 500px; margin: auto; min-height: 250px;">
            <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 text-center">活动分类占比</h4>
            <canvas id="historyPieChart"></canvas>
        </div>

        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            @foreach (var session in sessions.OrderByDescending(s => s.StartTime))
            {
                <div class="bg-white dark:bg-gray-700 shadow-md rounded-lg p-4 hover:shadow-lg transition-all duration-200 cursor-pointer transform hover:-translate-y-1 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50" @onclick="() => ShowConversationDetails(session)" tabindex="0">
                    <div class="flex justify-between items-start mb-3">
                        <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm font-medium rounded-full transition-colors duration-200">@session.ActivityCategory</span>
                        <span class="text-sm text-gray-500 dark:text-gray-400 transition-colors duration-200">@session.StartTime.ToString("yyyy-MM-dd HH:mm")</span>
                    </div>
                    <div class="mb-3">
                        <p class="text-gray-700 dark:text-gray-300 text-sm line-clamp-3 transition-colors duration-200">@session.LLMSummary</p>
                    </div>
                    <div class="pt-3 border-t border-gray-200 dark:border-gray-600 transition-colors duration-200">
                        <span class="text-sm text-gray-600 dark:text-gray-400 transition-colors duration-200">
                            工作: <strong class="text-green-600 dark:text-green-400">@session.ActualWorkDurationMinutes</strong> min / 休息: <strong class="text-blue-600 dark:text-blue-400">@session.ActualBreakDurationMinutes</strong> min
                        </span>
                    </div>
                </div>
            }
        </div>
    }
    </div>
</div>

@if (_isHistoryModalVisible)
{
    <ConversationHistoryModal ConversationJson="_selectedConversationJson"
                              OnClose="() => _isHistoryModalVisible = false" />
}

@code {
    // 步骤 1: 定义视图模式 Enum
    private enum ViewMode { All, Day, Week, Month, Year, Custom }

    private List<PomodoroSession> sessions;
    private string message = "正在加载...";
    private const string ChartCanvasId = "historyPieChart";

    private DateTime? _startDate;
    private DateTime? _endDate;
    private ViewMode _currentViewMode;
    private string _viewTitle;
    private bool _isDataLoaded = false;

    private bool _isHistoryModalVisible = false;
    private string _selectedConversationJson;

    // 页面初始化时，默认设置为日视图
    protected override async Task OnInitializedAsync()
    {
        await ChangeViewAsync(ViewMode.Day);
        _isDataLoaded = true;
    }

    // 在UI渲染完成后绘制图表
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // 仅在首次加载或数据刷新后重新渲染图表
        if (firstRender && _isDataLoaded)
        {
            await RenderChartAsync();
        }
    }

    // 步骤 2: 核心方法，用于切换预设视图
    private async Task ChangeViewAsync(ViewMode newMode)
    {
        _currentViewMode = newMode;
        var now = DateTime.Now;

        switch (newMode)
        {
            case ViewMode.All:
                _startDate = null;
                _endDate = null;
                _viewTitle = "所有记录";
                break;
            case ViewMode.Day:
                _startDate = now.Date;
                _endDate = _startDate.Value.AddDays(1).AddTicks(-1);
                _viewTitle = $"今天 ({now:yyyy-MM-dd})";
                break;
            case ViewMode.Week:
                int diff = (7 + (int)now.DayOfWeek - (int)DayOfWeek.Monday) % 7;
                _startDate = now.AddDays(-1 * diff).Date;
                _endDate = _startDate.Value.AddDays(7).AddTicks(-1);
                _viewTitle = $"本周 ({_startDate:MM-dd} - {_endDate:MM-dd})";
                break;
            case ViewMode.Month:
                _startDate = new DateTime(now.Year, now.Month, 1);
                _endDate = _startDate.Value.AddMonths(1).AddTicks(-1);
                _viewTitle = $"{now:yyyy年MMMM}";
                break;
            case ViewMode.Year:
                _startDate = new DateTime(now.Year, 1, 1);
                _endDate = _startDate.Value.AddYears(1).AddTicks(-1);
                _viewTitle = $"{now:yyyy年}";
                break;
        }
        await ApplyFilterAsync();
        await RenderChartAsync();
    }

    // 自定义筛选按钮的处理器
    private async Task ApplyCustomFilterAsync()
    {
        _currentViewMode = ViewMode.Custom;
        if (_startDate.HasValue && _endDate.HasValue)
        {
            _viewTitle = $"自定义范围: {_startDate:g} - {_endDate:g}";
        }
        else
        {
            _viewTitle = "自定义范围";
        }
        await ApplyFilterAsync();
        await RenderChartAsync();
    }

    // 通用的数据查询和UI刷新方法
    private async Task ApplyFilterAsync()
    {
        var query = DbContext.Sessions.AsQueryable();

        if (_startDate.HasValue)
        {
            // 支持时间段筛选
            query = query.Where(s => s.StartTime >= _startDate.Value);
        }
        if (_endDate.HasValue)
        {
            query = query.Where(s => s.EndTime <= _endDate.Value);
        }

        sessions = await query.ToListAsync();

        if (!sessions.Any())
        {
            message = "在指定的时间范围内没有找到任何记录。";
        }

        // 仅刷新C#部分的UI，图表渲染交由OnAfterRenderAsync
        StateHasChanged();
    }

    private async Task RenderChartAsync()
    {
        if (sessions == null || !sessions.Any())
        {
            await JSRuntime.InvokeVoidAsync("destroyChart", ChartCanvasId);
            return;
        }

        var categoryDistribution = sessions
            .Where(s => !string.IsNullOrEmpty(s.ActivityCategory) && s.ActualWorkDurationMinutes > 0)
            .GroupBy(s => s.ActivityCategory)
            .Select(g => new
            {
                Category = g.Key,
                TotalMinutes = g.Sum(s => s.ActualWorkDurationMinutes)
            })
            .ToList();

        if (categoryDistribution.Any())
        {
            var chartData = new
            {
                labels = categoryDistribution.Select(d => d.Category).ToArray(),
                values = categoryDistribution.Select(d => d.TotalMinutes).ToArray()
            };
            await JSRuntime.InvokeVoidAsync("createOrUpdatePieChart", ChartCanvasId, chartData);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("destroyChart", ChartCanvasId);
        }
    }

    private void ShowConversationDetails(PomodoroSession session)
    {
        _selectedConversationJson = session.UserInput;
        _isHistoryModalVisible = true;
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("destroyChart", ChartCanvasId);
    }
}
