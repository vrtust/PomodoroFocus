@page "/"
@using PomodoroFocus.Components.Shared
@using System.Diagnostics
@inject IPomodoroTimerService TimerService
@inject ISettingsService SettingsService
@inject AppDbContext DbContext
@inject IFloatingWindowService FloatingWindowService
@implements IDisposable

<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col justify-center items-center min-h-[80vh] bg-white dark:bg-gray-800 rounded-lg shadow-md transition-colors duration-200 hover:shadow-lg">
        <h2 class="text-4xl font-bold text-primary-600 mb-4 transition-colors duration-200 @(TimerService.CurrentCycleState == PomodoroCycleState.Work ? "animate-pulse" : "")">
            @((TimerService.CurrentCycleState == PomodoroCycleState.Work) ? "工作" : "休息")
        </h2>
        <h1 class="text-6xl sm:text-7xl lg:text-8xl font-light text-gray-800 dark:text-gray-200 mb-8 tracking-wide transition-all duration-300 @(TimerService.IsRunning && TimerService.CurrentCycleState == PomodoroCycleState.Work ? "animate-pulse" : "")">
            @TimerService.TimeLeft.ToString("mm\\:ss")
        </h1>

        <div class="flex flex-wrap justify-center gap-4 sm:gap-6">
            @if (!TimerService.IsRunning)
            {
                <button class="px-6 py-3 bg-green-500 hover:bg-green-600 text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 active:scale-95" @onclick="StartTimer">
                    Start
                </button>
            }
            else
            {
                <button class="px-6 py-3 bg-yellow-500 hover:bg-yellow-600 text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50 active:scale-95" @onclick="PauseTimer">
                    Pause
                </button>
                <button class="px-6 py-3 bg-red-500 hover:bg-red-600 text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 active:scale-95" @onclick="EndPhaseEarly">
                    结束
                </button>
            }

            <button class="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 active:scale-95" @onclick="ResetTimer">
                Reset
            </button>

            <button class="px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 active:scale-95" @onclick="ToggleWidget">
                悬浮窗
            </button>
        </div>
    </div>
</div>
<PomodoroLogModal 
    IsVisible="isLogModalVisible" 
    OnClose="@(() => isLogModalVisible = false)"
    OnComplete="HandleLogCompletion" />


@code {
    private bool isLogModalVisible = false; // 默认不显示，仅在计时结束后显示
    private PomodoroSession _sessionInProgress; // 用于暂存需要记录日志的会话

    private bool _isWidgetVisible = false;

    protected override void OnInitialized()
    {
        TimerService.OnTick += OnTimerTick;
        TimerService.OnPhaseCompleted += OnPhaseCompleted;
    }

    private void StartTimer() => TimerService.Start();
    private void PauseTimer() => TimerService.Pause();
    private void ResetTimer() => TimerService.Reset();
    private void EndPhaseEarly() => TimerService.EndPhaseEarly();

    private async void OnTimerTick() => await InvokeAsync(StateHasChanged);

    private async void OnTimerCompleted(PomodoroCycleState completedState)
    {
        if (completedState == PomodoroCycleState.Work)
        {
            isLogModalVisible = true;
        }
        else // 休息结束后，自动开始下一个工作时段
        {
            TimerService.Start();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void OnPhaseCompleted(PomodoroSession session, PomodoroCycleState completedState)
    {
        _sessionInProgress = session; // 始终用服务传来的最新会话状态更新本地副本

        if (completedState == PomodoroCycleState.Work)
        {
            // 工作阶段结束，弹出日志记录窗口
            isLogModalVisible = true;
        }
        else // 休息阶段结束
        {
            // 会话彻底完成
            _sessionInProgress.EndTime = DateTime.Now;

            // 核心修正：仅在会话完全结束后，才进行数据库保存
            DbContext.Sessions.Add(_sessionInProgress);
            await DbContext.SaveChangesAsync();

            TimerService.Reset(); // 重置计时器，准备下一个新会话
        }
        await InvokeAsync(StateHasChanged);
    }

    private void HandleLogCompletion((string Summary, string Category, string FullConversation) result)
    {
        if (_sessionInProgress != null)
        {
            _sessionInProgress.LLMSummary = result.Summary;
            _sessionInProgress.ActivityCategory = result.Category;
            _sessionInProgress.UserInput = result.FullConversation;
        }

        isLogModalVisible = false;

        // 明确指令：开始下一阶段（休息）
        TimerService.BeginNextPhase();
    }

    private void ToggleWidget()
    {
        if (_isWidgetVisible)
        {
            FloatingWindowService.Hide();
            _isWidgetVisible = false;
        }
        else
        {
            FloatingWindowService.Show();
            _isWidgetVisible = true;
        }
    }

    public void Dispose()
    {
        TimerService.OnTick -= OnTimerTick;
        TimerService.OnPhaseCompleted -= OnPhaseCompleted;
    }
}
