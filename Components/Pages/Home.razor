@page "/"
@using PomodoroFocus.Components.Shared
@using System.Diagnostics
@inject IPomodoroTimerService TimerService
@inject ISettingsService SettingsService
@inject AppDbContext DbContext
@inject IFloatingWindowService FloatingWindowService
@implements IDisposable

<div class="min-h-screen bg-gradient-to-br dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-all duration-500">
    <div class="container mx-auto max-w-4xl">
        <div class="relative overflow-hidden rounded-3xl shadow-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg border border-white/20 dark:border-gray-700/50 transition-all duration-500 hover:shadow-2xl">

            <!-- 状态指示器 -->
            <div class="relative pt-10 px-6 flex justify-center">
                <div class="inline-flex items-center px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 @(TimerService.CurrentCycleState == PomodoroCycleState.Work ? "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300" : "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300")">
                    <span class="relative flex h-3 w-3 mr-2">
                        <span class="animate-ping absolute inline-flex h-full w-full rounded-full @(TimerService.CurrentCycleState == PomodoroCycleState.Work ? "bg-red-400" : "bg-green-400") opacity-75"></span>
                        <span class="relative inline-flex rounded-full h-3 w-3 @(TimerService.CurrentCycleState == PomodoroCycleState.Work ? "bg-red-500" : "bg-green-500")"></span>
                    </span>
                    @((TimerService.CurrentCycleState == PomodoroCycleState.Work) ? "专注时间" : "休息时间")
                </div>
            </div>

            <!-- 计时器显示 -->
            <div class="relative py-8 px-6 flex flex-col items-center justify-center">
                <div class="relative mb-10">
                    <!-- 环形进度条 -->
                    <div class="relative w-64 h-64 sm:w-72 sm:h-72 md:w-80 md:h-80">
                        <svg class="w-full h-full" viewBox="0 0 100 100">
                            <!-- 背景圆环 -->
                            <circle cx="50" cy="50" r="45" fill="none" stroke="currentColor" stroke-width="3" class="text-gray-200 dark:text-gray-700"></circle>
                            <!-- 进度圆环 -->
                            <circle cx="50" cy="50" r="45" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round"
                                    class="text-indigo-500 dark:text-indigo-400 transition-all duration-1000 ease-out"
                                    stroke-dasharray="@(2 * Math.PI * 45)"
                                    stroke-dashoffset="@(TimerService.CurrentCycleState == PomodoroCycleState.Work
                                                ? (2 * Math.PI * 45) * (1 - TimerService.TimeLeft.TotalSeconds / (SettingsService.CurrentSettings.PomodoroDuration * 60))
                                                : (2 * Math.PI * 45) * (1 - TimerService.TimeLeft.TotalSeconds / (SettingsService.CurrentSettings.ShortBreakDuration * 60)))"
                                    transform="rotate(-90 50 50)">
                            </circle>
                        </svg>

                        <!-- 计时器文本 -->
                        <div class="absolute inset-0 flex flex-col items-center justify-center">
                            <h1 class="text-5xl sm:text-6xl md:text-7xl font-bold text-gray-800 dark:text-gray-100 mb-2 tracking-tight transition-all duration-300 @(TimerService.IsRunning && TimerService.CurrentCycleState == PomodoroCycleState.Work ? "animate-pulse-slow" : "")">
                                @TimerService.TimeLeft.ToString("mm\\:ss")
                            </h1>
                            <p class="text-sm text-gray-500 dark:text-gray-400 font-medium">
                                @if (TimerService.CurrentCycleState == PomodoroCycleState.Work)
                                {
                                    <span>专注中</span>
                                }
                                else
                                {
                                    <span>休息中</span>
                                }
                            </p>
                        </div>
                    </div>
                </div>

                <!-- 控制按钮 -->
                <div class="flex flex-wrap justify-center gap-4 w-full max-w-md">
                    @if (!TimerService.IsRunning)
                    {
                        <button class="flex-1 min-w-[120px] px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 active:scale-95 flex items-center justify-center" @onclick="StartTimer">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                            </svg>
                            开始
                        </button>
                    }
                    else
                    {
                        <button class="flex-1 min-w-[120px] px-6 py-3 bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-opacity-50 active:scale-95 flex items-center justify-center" @onclick="PauseTimer">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                            暂停
                        </button>
                        <button class="flex-1 min-w-[120px] px-6 py-3 bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 active:scale-95 flex items-center justify-center" @onclick="EndPhaseEarly">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
                            </svg>
                            结束
                        </button>
                    }
                    <button class="flex-1 min-w-[120px] px-6 py-3 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 active:scale-95 flex items-center justify-center" @onclick="ResetTimer">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                        </svg>
                        重置
                    </button>
                    <button class="flex-1 min-w-[120px] px-6 py-3 bg-gradient-to-r from-indigo-500 to-blue-600 hover:from-indigo-600 hover:to-blue-700 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 active:scale-95 flex items-center justify-center" @onclick="ToggleWidget">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M5 4a1 1 0 00-2 0v7.268a2 2 0 000 3.464V16a1 1 0 102 0v-1.268a2 2 0 000-3.464V4zM11 4a1 1 0 10-2 0v1.268a2 2 0 000 3.464V16a1 1 0 102 0V8.732a2 2 0 000-3.464V4zM16 3a1 1 0 011 1v7.268a2 2 0 010 3.464V16a1 1 0 11-2 0v-1.268a2 2 0 010-3.464V4a1 1 0 011-1z" />
                        </svg>
                        悬浮窗
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<PomodoroLogModal IsVisible="isLogModalVisible"
                  OnClose="@(() => isLogModalVisible = false)"
                  OnComplete="HandleLogCompletion" />

@code {
    private bool isLogModalVisible = false; // 默认不显示，仅在计时结束后显示
    private PomodoroSession _sessionInProgress; // 用于暂存需要记录日志的会话
    private bool _isWidgetVisible = false;

    protected override void OnInitialized()
    {
        TimerService.OnTick += OnTimerTick;
        TimerService.OnPhaseCompleted += OnPhaseCompleted;
    }

    private void StartTimer() => TimerService.Start();
    private void PauseTimer() => TimerService.Pause();
    private void ResetTimer() => TimerService.Reset();
    private void EndPhaseEarly() => TimerService.EndPhaseEarly();

    private async void OnTimerTick() => await InvokeAsync(StateHasChanged);

    private async void OnTimerCompleted(PomodoroCycleState completedState)
    {
        if (completedState == PomodoroCycleState.Work)
        {
            isLogModalVisible = true;
        }
        else // 休息结束后，自动开始下一个工作时段
        {
            TimerService.Start();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void OnPhaseCompleted(PomodoroSession session, PomodoroCycleState completedState)
    {
        _sessionInProgress = session; // 始终用服务传来的最新会话状态更新本地副本
        if (completedState == PomodoroCycleState.Work)
        {
            // 工作阶段结束，弹出日志记录窗口
            isLogModalVisible = true;
        }
        else // 休息阶段结束
        {
            // 会话彻底完成
            _sessionInProgress.EndTime = DateTime.Now;
            // 核心修正：仅在会话完全结束后，才进行数据库保存
            DbContext.Sessions.Add(_sessionInProgress);
            await DbContext.SaveChangesAsync();
            TimerService.Reset(); // 重置计时器，准备下一个新会话
        }
        await InvokeAsync(StateHasChanged);
    }

    private void HandleLogCompletion((string Summary, string Category, string FullConversation) result)
    {
        if (_sessionInProgress != null)
        {
            _sessionInProgress.LLMSummary = result.Summary;
            _sessionInProgress.ActivityCategory = result.Category;
            _sessionInProgress.UserInput = result.FullConversation;
        }
        isLogModalVisible = false;
        // 明确指令：开始下一阶段（休息）
        TimerService.BeginNextPhase();
    }

    private void ToggleWidget()
    {
        if (_isWidgetVisible)
        {
            FloatingWindowService.Hide();
            _isWidgetVisible = false;
        }
        else
        {
            FloatingWindowService.Show();
            _isWidgetVisible = true;
        }
    }

    public void Dispose()
    {
        TimerService.OnTick -= OnTimerTick;
        TimerService.OnPhaseCompleted -= OnPhaseCompleted;
    }
}