@using PomodoroFocus.Models
@using OpenAI.Chat
@using System.Text.Json

<div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 transition-all duration-300 ease-out z-50" @onclick="Close">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-lg w-full mx-4 p-6 transform transition-all duration-300 ease-out scale-100" @onclick:stopPropagation="true">

        <div class="relative">
            <h4 class="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100 transition-colors duration-200">对话记录详情</h4>
            <button type="button" class="absolute -top-2 -right-2 w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50" @onclick="Close" aria-label="Close">✕</button>
        </div>

        <div class="max-h-96 overflow-auto">
            @if (_conversationHistory != null && _conversationHistory.Any())
            {
                @foreach (var message in _conversationHistory)
                {
                    <div class="p-4 mb-2 bg-gray-100 dark:bg-gray-700 rounded-lg transition-colors duration-200 @GetMessageClass(message)">
                        @if (message.Content != null && message.Content.Any())
                        {
                            @message.Content[0].Text
                        }
                    </div>
                }
            }
            else
            {
                <div class="p-4 mb-2 bg-gray-100 dark:bg-gray-700 rounded-lg transition-colors duration-200">@_errorMessage</div>
            }
        </div>

        <div class="mt-4 flex justify-end">
            <button class="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 active:scale-95" @onclick="Close">关闭</button>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public string ConversationJson { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private List<ChatMessage> _conversationHistory;
    private string _errorMessage = "没有有效的对话记录。";

    protected override void OnParametersSet()
    {
        // 仅在组件变为可见时才解析JSON，提高效率
        if (!string.IsNullOrEmpty(ConversationJson))
        {
            try
            {
                // 为防止反序列化时出现null引用，提供一个空列表作为默认值
                _conversationHistory = JsonSerializer.Deserialize<List<ChatMessage>>(ConversationJson) ?? new List<ChatMessage>();
                if (!_conversationHistory.Any())
                {
                    _errorMessage = "对话记录为空。";
                }
            }
            catch (JsonException ex)
            {
                _conversationHistory = null;
                _errorMessage = $"无法解析对话记录数据。错误: {ex.Message}";
            }
        }
    }

    private string GetMessageClass(ChatMessage message)
    {
        return message switch
        {
            UserChatMessage => "user-message",
            AssistantChatMessage => "assistant-message",
            _ => ""
        };
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}
