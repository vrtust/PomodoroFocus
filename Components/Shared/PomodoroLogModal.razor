@inject ILLMService LlmService
@using System.Text.Json
@using OpenAI.Chat

@if (IsVisible)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm transition-all duration-300 ease-out z-50">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-2xl w-full mx-4 max-h-[90vh] flex flex-col transform transition-all duration-300 ease-out scale-100">

            <!-- 模态框头部 -->
            <div class="bg-gradient-to-r from-green-500 to-emerald-600 p-6 rounded-t-2xl">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <div class="p-2 bg-white/20 rounded-lg mr-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                            </svg>
                        </div>
                        <h3 class="text-xl font-bold text-white">记录你的活动</h3>
                    </div>
                    <button type="button" class="p-2 rounded-full bg-white/20 text-white hover:bg-white/30 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50" @onclick="Close" aria-label="Close">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>

            <!-- 对话内容区域 -->
            <div class="flex-1 overflow-auto p-6 bg-gray-50 dark:bg-gray-900/50">
                <div class="space-y-4">
                    @foreach (var message in conversationHistory)
                    {
                        <div class="flex @(message is UserChatMessage ? "justify-end" : "justify-start")">
                            <div class="max-w-[80%] rounded-2xl px-4 py-3 @(GetMessageClass(message))">
                                <div class="flex items-center mb-2">
                                    <div class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center @(message is UserChatMessage ? "bg-green-500" : "bg-blue-500") mr-2">
                                        @if (message is UserChatMessage)
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                                            </svg>
                                        }
                                    </div>
                                    <span class="text-xs font-medium @(message is UserChatMessage ? "text-green-700 dark:text-green-300" : "text-blue-700 dark:text-blue-300")">
                                        @(message is UserChatMessage ? "你" : "AI助手")
                                    </span>
                                </div>
                                <div class="text-gray-800 dark:text-gray-200">
                                    @if (message.Content != null && message.Content.Any())
                                    {
                                        @message.Content[0].Text
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="flex justify-start">
                            <div class="max-w-[80%] rounded-2xl px-4 py-3 bg-blue-100 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800/50">
                                <div class="flex items-center mb-2">
                                    <div class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center bg-blue-500 mr-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <span class="text-xs font-medium text-blue-700 dark:text-blue-300">AI助手</span>
                                </div>
                                <div class="flex space-x-2">
                                    <div class="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                                    <div class="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                                    <div class="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- 输入区域 -->
            <div class="p-6 bg-white dark:bg-gray-800 rounded-b-2xl border-t border-gray-200 dark:border-gray-700">
                <div class="flex space-x-3">
                    <input @bind="currentUserInput" @onkeydown="HandleKeyDown" placeholder="输入你做了什么..." disabled="@isLoading"
                           class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed" />
                    <button @onclick="SendMessage" disabled="@isLoading"
                            class="px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-medium rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                        发送
                    </button>
                </div>

                <div class="mt-4 flex justify-between items-center">
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                        与AI对话后点击"完成记录"自动生成摘要
                    </div>
                    <button @onclick="FinishLogging" disabled="@isLoading"
                            class="px-6 py-2.5 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white font-medium rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 active:scale-95 disabled:opacity-50 disabled:transform-none flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                        完成记录
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<(string Summary, string Category, string FullConversation)> OnComplete { get; set; }

    private string currentUserInput = "";
    private List<ChatMessage> conversationHistory = new();
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && conversationHistory.Count == 0)
        {
            isLoading = true;
            var initialPrompt = await LlmService.GetInitialPromptAsync();
            conversationHistory.Add(new AssistantChatMessage(initialPrompt));
            isLoading = false;
        }
    }

    private string GetMessageClass(ChatMessage message)
    {
        return message switch
        {
            UserChatMessage => "bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-800/50",
            AssistantChatMessage => "bg-blue-100 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800/50",
            _ => "bg-gray-100 dark:bg-gray-700"
        };
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentUserInput) || isLoading) return;

        var userMessage = currentUserInput.Trim();
        conversationHistory.Add(new UserChatMessage(userMessage));
        currentUserInput = "";
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        var assistantResponse = await LlmService.GetNextResponseAsync(conversationHistory);
        conversationHistory.Add(new AssistantChatMessage(assistantResponse));
        isLoading = false;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task FinishLogging()
    {
        isLoading = true;
        if (conversationHistory.Count == 0)
        {
            isLoading = false;
            return;
        }

        var simpleHistory = conversationHistory.Select(m => new SimpleChatMessage
        {
            Role = m switch
            {
                UserChatMessage => "User",
                AssistantChatMessage => "Assistant",
                SystemChatMessage => "System",
                _ => "Unknown"
            },
            // 我们假设第一个内容部分是我们想要保存的文本。
            Content = m.Content.FirstOrDefault()?.Text ?? string.Empty
        }).ToList();

        var conversationJson = JsonSerializer.Serialize(simpleHistory);

        var result = await LlmService.SummarizeConversationAsync(conversationHistory);
        isLoading = false;
        conversationHistory.Clear();

        // 将包含JSON的完整结果传递给父组件
        await OnComplete.InvokeAsync((result.Summary, result.Category, conversationJson));
        await OnClose.InvokeAsync();
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}