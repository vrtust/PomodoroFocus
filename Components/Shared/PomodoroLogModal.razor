@inject ILLMService LlmService
@inject AppDbContext DbContext
@inject ISettingsService SettingsService
@using OpenAI.Chat

@if (IsVisible)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm transition-all duration-300 ease-out z-50">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-2xl w-full mx-4 max-h-[90vh] flex flex-col transform transition-all duration-300 ease-out scale-100 overflow-auto [scrollbar-width:none] [&::-webkit-scrollbar]:hidden">
            <!-- 模态框头部 -->
            <div class="bg-gradient-to-r from-green-500 to-emerald-600 p-4 rounded-t-2xl">
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <div class="p-2 bg-white/20 rounded-lg mr-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                            </svg>
                        </div>
                        <h3 class="text-xl font-bold text-white">记录你的活动</h3>
                    </div>
                    <button type="button" class="p-2 rounded-full bg-white/20 text-white hover:bg-white/30 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50" @onclick="Close" aria-label="Close">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>

            @* --- 新增：上下文选择区域 --- *@
            <div class="p-3 bg-gray-100 dark:bg-gray-700/50 border-b border-gray-200 dark:border-gray-700">
                <div class="flex items-center justify-between">
                    <label class="text-sm font-medium text-gray-700 dark:text-gray-300">附加上下文:</label>
                    <div class="flex items-center gap-2 rounded-lg bg-white dark:bg-gray-800 p-1 shadow-sm">
                        <button @onclick="() => SelectContext(ContextDuration.None)" class="@GetContextButtonClass(ContextDuration.None)">无</button>
                        <button @onclick="() => SelectContext(ContextDuration.LastDay)" class="@GetContextButtonClass(ContextDuration.LastDay)">1天</button>
                        <button @onclick="() => SelectContext(ContextDuration.Last3Days)" class="@GetContextButtonClass(ContextDuration.Last3Days)">3天</button>
                        <button @onclick="() => SelectContext(ContextDuration.Last7Days)" class="@GetContextButtonClass(ContextDuration.Last7Days)">7天</button>
                    </div>
                </div>
                @if (_isContextLoading)
                {
                    <p class="text-xs text-center text-gray-500 dark:text-gray-400 mt-2 animate-pulse">正在加载历史对话...</p>
                }
            </div>

            <!-- 对话内容区域 -->
            <div class="flex-1 overflow-auto p-4 bg-gray-50 dark:bg-gray-900/50 min-h-[200px]">
                <div class="space-y-4">
                    @foreach (var uiMessage in conversationHistory)
                    {
                        <div class="flex @(uiMessage.Message is UserChatMessage ? "justify-end" : "justify-start") w-full">
                            <div class="flex items-end gap-2 @(uiMessage.Message is UserChatMessage ? "flex-row-reverse" : "flex-row") w-full">
                                <div class="max-w-[80%] rounded-2xl px-4 py-3 @(GetMessageClass(uiMessage.Message)) flex-shrink">
                                    <div class="flex items-center mb-2">
                                        <div class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center @(uiMessage.Message is UserChatMessage ? "bg-green-500" : "bg-blue-500") mr-2">
                                            @if (uiMessage.Message is UserChatMessage)
                                            {
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                                                </svg>
                                            }
                                            else
                                            {
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                                                </svg>
                                            }
                                        </div>
                                        <span class="text-xs font-medium @(uiMessage.Message is UserChatMessage ? "text-green-700 dark:text-green-300" : "text-blue-700 dark:text-blue-300")">
                                            @(uiMessage.Message is UserChatMessage ? "你" : "AI助手")
                                        </span>
                                    </div>
                                    <div class="text-gray-800 dark:text-gray-200 whitespace-pre-wrap">
                                        @if (uiMessage.Message.Content != null && uiMessage.Message.Content.Any())
                                        {
                                            @uiMessage.Message.Content[0].Text
                                        }
                                    </div>
                                </div>
                                @* 如果发送失败，显示重试按钮 *@
                                @if (!uiMessage.IsSent && uiMessage.Message is UserChatMessage && !isLoading)
                                {
                                    <button @onclick="() => RetrySendMessage(uiMessage)" class="p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/50 rounded-full transition-colors duration-200 mb-1 flex-shrink-0" aria-label="重试">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zM.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                }
                            </div>
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="flex justify-start">
                            <div class="max-w-[80%] rounded-2xl px-4 py-3 bg-blue-100 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800/50">
                                <div class="flex items-center mb-2">
                                    <div class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center bg-blue-500 mr-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <span class="text-xs font-medium text-blue-700 dark:text-blue-300">AI助手</span>
                                </div>
                                <div class="flex space-x-2">
                                    <div class="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                                    <div class="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                                    <div class="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style="animation-delay: 0.4s"></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- 输入区域 -->
            <div class="p-4 bg-white dark:bg-gray-800 rounded-b-2xl border-t border-gray-200 dark:border-gray-700">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="mb-2 p-4 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800/50 rounded-lg flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500 dark:text-red-400 mr-3 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                        <span class="text-sm text-red-700 dark:text-red-300">@errorMessage</span>
                    </div>
                }

                <div class="flex space-x-3">
                    <textarea @bind="currentUserInput" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="@(HasFailedMessage ? "请先解决发送失败的消息" : "输入你做了什么... (按 Ctrl+Enter 发送， 按 Enter 换行，本页面可滚动)")" disabled="@isLoading" rows="3"
                              class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed resize-y" />
                    <button @onclick="SendMessage" disabled="@(isLoading || HasFailedMessage)"
                            class="px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-medium rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                        发送
                    </button>
                </div>

                <div class="mt-2 flex justify-between items-center">
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                        与AI对话后点击"完成记录"自动生成摘要
                    </div>
                    <button @onclick="FinishLogging" disabled="@isLoading"
                            class="px-6 py-2.5 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white font-medium rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 active:scale-95 disabled:opacity-50 disabled:transform-none flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                        完成记录
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<(string Summary, string Category, string FullConversation)> OnComplete { get; set; }

    public class UIMessage
    {
        public ChatMessage Message { get; set; }
        public bool IsSent { get; set; } = true; // 默认是已发送成功
        public bool IsSending { get; set; } = false; // 标记正在发送中
    }

    private string currentUserInput = "";
    private List<UIMessage> conversationHistory = new();
    private bool isLoading = false;
    private string errorMessage = null;

    public enum ContextDuration { None, LastDay, Last3Days, Last7Days }

    private ContextDuration _selectedContext = ContextDuration.None;
    private List<ChatMessage> _contextHistory = new(); // 存储从数据库加载的历史上下文
    private bool _isContextLoading = false;

    private bool HasFailedMessage => conversationHistory.Any(m => !m.IsSent && !m.IsSending);

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && conversationHistory.Count == 0)
        {
            isLoading = true; 
            var initialPrompt = await LlmService.GetInitialPromptAsync();
            conversationHistory.Add(new UIMessage { Message = new AssistantChatMessage(initialPrompt) , IsSent = true});
            isLoading = false;
        }
    }

    private string GetMessageClass(ChatMessage message)
    {
        return message switch
        {
            UserChatMessage => "bg-green-100 dark:bg-green-900/30 border border-green-200 dark:border-green-800/50",
            AssistantChatMessage => "bg-blue-100 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800/50",
            _ => "bg-gray-100 dark:bg-gray-700"
        };
    }

    private async Task ExecuteSend(UIMessage messageToSend)
    {
        errorMessage = null;
        messageToSend.IsSending = true;
        messageToSend.IsSent = false;
        isLoading = true; // 全局加载状态
        await InvokeAsync(StateHasChanged);

        try
        {
            // 总是从完整的、未失败的历史中发送
            var currentConversation = conversationHistory
                .Where(ui => ui.IsSent || ui == messageToSend) // 只包括已发送成功的消息
                .Select(ui => ui.Message)
                .ToList();

            var fullHistory = new List<ChatMessage>();
            if (_contextHistory.Any())
            {
                // 添加一个系统消息来分隔历史和当前对话，这很重要！
                fullHistory.Add(new SystemChatMessage(SettingsService.CurrentSettings.ContextSeparatorPrompt));
                fullHistory.AddRange(_contextHistory);
                fullHistory.Add(new SystemChatMessage(SettingsService.CurrentSettings.EndContextSeparatorPrompt));
            }
            fullHistory.AddRange(currentConversation);

            var assistantResponse = await LlmService.GetNextResponseAsync(fullHistory);

            // 成功！
            conversationHistory.Add(new UIMessage { Message = new AssistantChatMessage(assistantResponse), IsSent = true });
            messageToSend.IsSent = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"AI响应失败: {ex.Message}。请检查您的API Key和网络连接后重试。";
            // 保持 messageToSend.IsSent = false;
        }
        finally
        {
            messageToSend.IsSending = false;
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentUserInput) || isLoading || HasFailedMessage) return;

        var userMessageText = currentUserInput.Trim();
        currentUserInput = ""; // 清空输入框

        var newUserMessage = new UIMessage
        {
            Message = new UserChatMessage(userMessageText),
            IsSent = false // 标记为待发送
        };
        conversationHistory.Add(newUserMessage);

        await ExecuteSend(newUserMessage);
    }

    private async Task RetrySendMessage(UIMessage messageToRetry)
    {
        if (isLoading) return; // 防止重复点击
        await ExecuteSend(messageToRetry);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.CtrlKey)
        {
            await SendMessage();
        }
    }

    private async Task FinishLogging()
    {
        if (HasFailedMessage)
        {
            errorMessage = "无法完成记录，有消息发送失败。请先重试。";
            return;
        }

        // 如果没有对话，不需要调用AI
        if (conversationHistory.Count <= 1)
        {
            await OnComplete.InvokeAsync(("未记录活动详情", "未分类", "[]"));
            await Close();
            return;
        }

        errorMessage = null; // 清除之前的错误
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var fullHistoryForSummary = new List<ChatMessage>();
            if (_contextHistory.Any())
            {
                fullHistoryForSummary.Add(new SystemChatMessage(SettingsService.CurrentSettings.ContextSeparatorPrompt));
                fullHistoryForSummary.AddRange(_contextHistory);
                fullHistoryForSummary.Add(new SystemChatMessage(SettingsService.CurrentSettings.EndContextSeparatorPrompt));
            }
            // 从 UIMessage 中提取当前对话的 ChatMessage
            var currentConversationMessages = conversationHistory.Select(ui => ui.Message).ToList();
            fullHistoryForSummary.AddRange(currentConversationMessages);

            var result = await LlmService.SummarizeConversationAsync(fullHistoryForSummary);

            var simpleHistoryToSave = currentConversationMessages.Select(m => new SimpleChatMessage
            {
                Role = m switch
                {
                    UserChatMessage => "User",
                    AssistantChatMessage => "Assistant",
                    SystemChatMessage => "System",
                    _ => "Unknown"
                },
                Content = m.Content.FirstOrDefault()?.Text ?? string.Empty
            }).ToList();

            var conversationJsonToSave = JsonSerializer.Serialize(simpleHistoryToSave);

            await OnComplete.InvokeAsync((result.Summary, result.Category, conversationJsonToSave));
            await Close(); // 仅在成功时关闭模态框
        }
        catch (Exception ex)
        {
            errorMessage = $"生成摘要失败: {ex.Message}。请重试。";
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetContextButtonClass(ContextDuration duration)
    {
        var baseClasses = "px-3 py-1 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50";
        if (_selectedContext == duration)
        {
            return $"{baseClasses} bg-green-500 text-white shadow";
        }
        return $"{baseClasses} bg-transparent text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600";
    }

    private async Task SelectContext(ContextDuration duration)
    {
        _selectedContext = duration;
        _isContextLoading = true;
        _contextHistory.Clear();
        await InvokeAsync(StateHasChanged);

        if (duration == ContextDuration.None)
        {
            _isContextLoading = false;
            return;
        }

        var days = duration switch
        {
            ContextDuration.LastDay => 1,
            ContextDuration.Last3Days => 3,
            ContextDuration.Last7Days => 7,
            _ => 0
        };

        var startDate = DateTime.Now.Date.AddDays(-days);

        var pastSessions = await DbContext.Sessions
            .Where(s => s.StartTime >= startDate && !string.IsNullOrEmpty(s.UserInput))
            .OrderBy(s => s.StartTime)
            .ToListAsync();

        foreach (var session in pastSessions)
        {
            try
            {
                // 复用我们之前在 ConversationHistoryModal 中的 DTO 逻辑
                var simpleHistory = JsonSerializer.Deserialize<List<SimpleChatMessage>>(session.UserInput);
                if (simpleHistory != null)
                {
                    foreach (var msg in simpleHistory)
                    {
                        // 将 SimpleChatMessage 转换回 ChatMessage
                        ChatMessage chatMsg = msg.Role switch
                        {
                            "User" => new UserChatMessage(msg.Content),
                            "Assistant" => new AssistantChatMessage(msg.Content),
                            _ => null
                        };
                        if (chatMsg != null) _contextHistory.Add(chatMsg);
                    }
                }
            }
            catch { /* 忽略无法解析的旧记录 */ }
        }

        _isContextLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Close()
    {
        // 清理状态，以便下次打开时是干净的
        conversationHistory.Clear();
        errorMessage = null;
        isLoading = false;
        currentUserInput = "";
        await OnClose.InvokeAsync();
    }
}