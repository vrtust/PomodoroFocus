@inject ILLMService LlmService
@using System.Text.Json

@if (IsVisible)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 transition-all duration-300 ease-out z-50">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-lg w-full mx-4 p-6 transform transition-all duration-300 ease-out scale-100">

            <div class="relative">
                <h4 class="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100 transition-colors duration-200">记录你的活动</h4>
            </div>

            <div class="max-h-96 overflow-auto">
                @foreach (var message in conversationHistory)
                {
                    <div class="p-4 mb-2 bg-gray-100 dark:bg-gray-700 rounded-lg transition-colors duration-200 @GetMessageClass(message)">
                        @message.Content[0].Text
                    </div>
                }
                @if (isLoading)
                {
                    <div class="p-4 mb-2 bg-gray-100 dark:bg-gray-700 rounded-lg transition-colors duration-200 animate-pulse">...</div>
                }
            </div>

            <div class="mt-4 flex gap-2">
                <input @bind="currentUserInput" @onkeydown="HandleKeyDown" placeholder="输入你做了什么..." disabled="@isLoading" class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hover:shadow-md disabled:opacity-50" />
                <button @onclick="SendMessage" disabled="@isLoading" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 active:scale-95 disabled:opacity-50 disabled:transform-none disabled:hover:shadow-md">发送</button>
            </div>

            <div class="mt-4 flex justify-end">
                <button class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 active:scale-95" @onclick="FinishLogging">完成记录</button>
            </div>

        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    // 2. 更新 EventCallback 的签名，增加 string FullConversation
    [Parameter]
    public EventCallback<(string Summary, string Category, string FullConversation)> OnComplete { get; set; }

    private string currentUserInput = "";
    private List<ChatMessage> conversationHistory = new();
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && conversationHistory.Count == 0)
        {
            isLoading = true;
            var initialPrompt = await LlmService.GetInitialPromptAsync();
            conversationHistory.Add(new AssistantChatMessage(initialPrompt));
            isLoading = false;
        }
    }
    
    // 省略 GetMessageClass, SendMessage, HandleKeyDown 方法 (无改动)
    private string GetMessageClass(ChatMessage message)
    {
        return message switch
        {
            UserChatMessage => "user-message",
            AssistantChatMessage => "assistant-message",
            _ => ""
        };
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentUserInput) || isLoading) return;

        var userMessage = currentUserInput;
        conversationHistory.Add(new UserChatMessage(userMessage));
        currentUserInput = "";
        isLoading = true;
        await InvokeAsync(StateHasChanged);

        var assistantResponse = await LlmService.GetNextResponseAsync(conversationHistory);
        conversationHistory.Add(new AssistantChatMessage(assistantResponse));
        isLoading = false;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task FinishLogging()
    {
        isLoading = true;
        if (conversationHistory.Count == 0)
        {
            isLoading = false;
            return;
        }
        
        // 3. 将对话历史序列化为JSON字符串
        var conversationJson = JsonSerializer.Serialize(conversationHistory);
        
        var result = await LlmService.SummarizeConversationAsync(conversationHistory);
        isLoading = false;

        conversationHistory.Clear();
        
        // 4. 将包含JSON的完整结果传递给父组件
        await OnComplete.InvokeAsync((result.Summary, result.Category, conversationJson));
        await OnClose.InvokeAsync();
    }
}
